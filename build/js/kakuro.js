// Generated by CoffeeScript 1.10.0
var Cell, Kakuro, intersect, loadKakuro, powersum, toArray, toBitmask, ways;

$(function() {
  return loadKakuro('kakuros/2016-01-08.txt');
});

loadKakuro = function(url) {
  return $.get(url, function(data) {
    var k;
    k = new Kakuro(data);
    return $('#kakuro-container').html(k.toHtml());
  });
};

powersum = function() {
  var bitmask, cur, j, l, m, max, n, ref, ref1, sums, total, x;
  if (window.ps != null) {
    return window.ps;
  }
  sums = (function() {
    var m, results;
    results = [];
    for (x = m = 0; m <= 45; x = ++m) {
      results.push([]);
    }
    return results;
  })();
  l = [1, 2, 3, 4, 5, 6, 7, 8, 9];
  max = 1 << l.length;
  for (bitmask = m = 1, ref = max; 1 <= ref ? m < ref : m > ref; bitmask = 1 <= ref ? ++m : --m) {
    cur = [];
    for (j = n = 0, ref1 = l.length; 0 <= ref1 ? n <= ref1 : n >= ref1; j = 0 <= ref1 ? ++n : --n) {
      if ((bitmask & (1 << j)) > 0) {
        cur.push(l[j]);
      }
    }
    total = cur.reduce(function(x, y) {
      return x + y;
    });
    sums[total].push(cur);
  }
  window.ps = sums;
  return sums;
};

ways = function(total, length) {
  return powersum()[total].filter(function(x) {
    return x.length === length;
  });
};

toBitmask = function(arr) {
  var i, len1, m, mask;
  mask = 0;
  for (m = 0, len1 = arr.length; m < len1; m++) {
    i = arr[m];
    mask |= 1 << i - 1;
  }
  return mask;
};

toArray = function(bitmask) {
  var arr, j, m;
  arr = [];
  for (j = m = 1; m <= 9; j = ++m) {
    if ((bitmask & (1 << j - 1)) > 0) {
      arr.push(j);
    }
  }
  return arr;
};

intersect = function(arr1, arr2) {
  return toArray(toBitmask(arr1) & toBitmask(arr2));
};

Kakuro = (function() {
  function Kakuro(text) {
    var cell, len1, len2, line, m, n, ref, ref1, row, x, y;
    this.cells = [];
    ref = text.split('\n');
    for (y = m = 0, len1 = ref.length; m < len1; y = ++m) {
      line = ref[y];
      row = [];
      ref1 = line.split(',');
      for (x = n = 0, len2 = ref1.length; n < len2; x = ++n) {
        cell = ref1[x];
        row.push(new Cell(cell, x, y));
      }
      this.cells.push(row);
    }
    this.cells.pop();
    window.k = this;
  }

  Kakuro.prototype.width = function() {
    return this.cells.length;
  };

  Kakuro.prototype.height = function() {
    return this.cells[0].length;
  };

  Kakuro.prototype.clear = function() {
    var cell, len1, m, ref, results, row, x, y;
    ref = this.cells;
    results = [];
    for (y = m = 0, len1 = ref.length; m < len1; y = ++m) {
      row = ref[y];
      results.push((function() {
        var len2, n, results1;
        results1 = [];
        for (x = n = 0, len2 = row.length; n < len2; x = ++n) {
          cell = row[x];
          if (cell.type() === 'NUMBER') {
            results1.push(cell.raw = "");
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  Kakuro.prototype.toHtml = function() {
    var cell, html, len1, len2, m, n, ref, row;
    html = '<table class="col-sm-12">';
    ref = this.cells;
    for (m = 0, len1 = ref.length; m < len1; m++) {
      row = ref[m];
      html += '<tr>';
      for (n = 0, len2 = row.length; n < len2; n++) {
        cell = row[n];
        html += cell.render();
      }
      html += '</tr>';
    }
    return html += '</table>';
  };

  Kakuro.prototype.rowLength = function(x, y) {
    var c, len, totalCell;
    totalCell = this.rowTotal(x, y);
    x = totalCell.x;
    y = totalCell.y;
    len = totalCell.x + 1;
    c = this.cells[y][len];
    while (c.type() === 'NUMBER') {
      if (!c) {
        break;
      }
      c = this.cells[y][++len];
    }
    return len - x - 1;
  };

  Kakuro.prototype.colLength = function(x, y) {
    var c, len, r, totalCell;
    totalCell = this.colTotal(x, y);
    x = totalCell.x;
    y = totalCell.y;
    len = totalCell.y + 1;
    c = this.cells[len][x];
    while (c.type() === 'NUMBER') {
      r = this.cells[++len];
      if (!r) {
        break;
      }
      c = r[x];
    }
    return len - y - 1;
  };

  Kakuro.prototype.rowTotal = function(x, y) {
    var c;
    c = this.cells[y][x];
    while (c.type() !== 'TOTAL') {
      c = this.cells[y][x--];
    }
    return c;
  };

  Kakuro.prototype.colTotal = function(x, y) {
    var c;
    c = this.cells[y][x];
    while (c.type() !== 'TOTAL') {
      c = this.cells[y--][x];
    }
    return c;
  };

  Kakuro.prototype.domain = function(x, y) {};

  return Kakuro;

})();

Cell = (function() {
  function Cell(text, x, y) {
    this.raw = text;
    this.x = x;
    this.y = y;
  }

  Cell.prototype.type = function() {
    if (this.raw === 'x') {
      return 'BLANK';
    }
    if (this.raw.includes('-')) {
      return 'TOTAL';
    }
    return 'NUMBER';
  };

  Cell.prototype.render = function() {
    if (this.type() === 'BLANK') {
      return '<td class="blank"></td>';
    }
    if (this.type() === 'TOTAL') {
      return '<td class="total">' + '<table>' + '<tr>' + '<td>' + this.topRightStr() + '</td>' + '</tr>' + '<tr>' + '<td>' + this.bottomLeftStr() + '</td>' + '</tr>' + '</table>' + '</td>';
    }
    return '<td class="number">' + this.number() + '</td>';
  };

  Cell.prototype.topRight = function() {
    var s;
    s = parseInt(this.raw.split('-')[1]);
    if (!!s) {
      return parseInt(s);
    } else {
      return 0;
    }
  };

  Cell.prototype.bottomLeft = function() {
    var s;
    s = this.raw.split('-')[0];
    if (!!s) {
      return parseInt(s);
    } else {
      return 0;
    }
  };

  Cell.prototype.topRightStr = function() {
    if (this.topRight() === 0) {
      return "";
    } else {
      return this.topRight() + "&rarr;";
    }
  };

  Cell.prototype.bottomLeftStr = function() {
    if (this.bottomLeft() === 0) {
      return "";
    } else {
      return this.bottomLeft() + "&darr;";
    }
  };

  Cell.prototype.number = function() {
    return this.raw;
  };

  return Cell;

})();
